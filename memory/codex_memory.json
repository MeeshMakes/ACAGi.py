{
  "version": "0.1.0",
  "last_updated": "2025-10-05",
  "stable_lessons": [
    {
      "title": "Verbose Implementation Standard",
      "summary": "All code and documentation must include rationale-rich commentary and explicit edge-case considerations.",
      "applies_to": "repository-wide"
    },
    {
      "title": "Session Logging Discipline",
      "summary": "Every working session must produce a log in logs/session_<date>.md capturing objectives, context, and follow-up prompts.",
      "applies_to": "workflow"
    },
    {
      "title": "Runtime Optional Dependency Checks",
      "summary": "Handle optional libraries by importing them normally and relying on runtime capability helpers to emit user-facing warnings when dependencies are missing.",
      "applies_to": "python-optional-deps"
    },
    {
      "title": "ACAGi Monolithic Ownership",
      "summary": "Core task management, background rendering, error console, and repository helper logic now live directly in ACAGi.py; future changes should edit the single file sections instead of Dev_Logic modules.",
      "applies_to": "acagi-architecture"
    },
    {
      "title": "Boot Environment Initialization",
      "summary": "ACAGi.py now centralizes DPI policy, workspace/transit resolution, shared logging, and BrainShell crash handling within a BootEnvironment manager; extend that section when adjusting startup flows.",
      "applies_to": "acagi-boot"
    },
    {
      "title": "Dev Logic Path Constant",
      "summary": "Use the DEV_LOGIC_ROOT constant within ACAGi.py when referencing prompts, datasets, or other assets migrated from Dev_Logic modules so paths remain stable after inlining.",
      "applies_to": "acagi-architecture"
    },
    {
      "title": "Event Dispatcher Telemetry",
      "summary": "Route new pub/sub topics through the unified EventDispatcher so queue backpressure, logging, and remote fan-out remain consistent across observation, note, and task streams.",
      "applies_to": "acagi-events"
    },
    {
      "title": "Hippocampus Dataset Dock",
      "summary": "Use the DatasetManagerDock to ingest tagged files or directories so Hippocampus can run OCR/embeddings, persist dataset nodes, and update the brain map registry.",
      "applies_to": "dataset-ingestion"
    },
    {
      "title": "Sentinel Event Monitoring",
      "summary": "SentinelMonitorHub listens to task.status/task.diff/task.updated topics, detects loops, regressions, and stalls, and publishes immune responses on system.immune.",
      "applies_to": "safety-monitoring"
    },
    {
      "title": "Operation Policy Enforcement",
      "summary": "SafetyManager consumes policies.json to enforce coder/test allowlists, denylists, approval prompts, and sandbox requirements via run_checked helpers.",
      "applies_to": "operation-safety"
    },
    {
      "title": "Terminal Health & Transcript Capture",
      "summary": "The terminal widget now drives the bridge LED through a TerminalHealthState machine and lets transcript taps store Hippocampus-backed anchors while logging session JSONL notices.",
      "applies_to": "terminal-ui"
    },
    {
      "title": "Virtual Desktop Dock Integration",
      "summary": "Virtual Desktop features now live in a dockable widget that lazily instantiates consoles, Dev Space tabs, and OCR overlays while consuming event bus updates for tasks, logs, and datasets.",
      "applies_to": "ui-virtual-desktop"
    },
    {
      "title": "Brain Map Dock",
      "summary": "ACAGi includes a BrainMapDock that lazily renders Hippocampus nodes and typed edges with energy/salience overlays and Dev Space focus callbacks when nodes are selected.",
      "applies_to": "ui-brain-map"
    }
  ],
  "procedures": [
    {
      "name": "Self-Prompt Kickoff",
      "steps": [
        "Review Agent manual, memory entries, and logic inbox for context.",
        "Draft a self-contained objective prompt and record it in the session log.",
        "Outline validation strategy before modifying files."
      ]
    }
  ],
  "tooling": {
    "ci": [
      "codex-pr-sentinel"
    ],
    "automation_scripts": [
      "tools/codex_pr_sentinel.py",
      "tools/logic_inbox.py"
    ]
  }
}
